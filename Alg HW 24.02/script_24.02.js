// Задача #1

// У вас есть 12 монет среди которых 1 монета фальшивая, весом отличающаяся от других монет.
// Вы должны определить фальшивую монету, используя только двухчашечные весы.
// Какое количество взвешиваний потребуется?
// Как мы можем определить фальшивую монету и узнать, тяжелее она или легче остальных?

// 1. Поделить все монеты на три группы по 4 монеты в каждой.
// 2. Взвесить подве группы монет, таким образм определить две группы одинакового веса, 
// та что отличается и содержит фальшивую монету.
// 3. Взвесить монетыпо одной в найденной группе.

// Задача #2
// Вы должны доставить несколько яиц из точки A в точку B,расположенных на расстоянии 100 этажей.
// У вас есть лестница, но у яиц есть свойство разбиваться,если они падают с определенной высоты и выше.
// Какое минимальное количество яиц вам понадобится,чтобы гарантировать доставку яиц без их разбивания,
// и как вы будете использовать лестницу,чтобы определить эту высоту?

// Разделим наши сто этажей на более мелкие диапазоны.
// Бросаем яйцо с 33 этажа. Если оно разбивается, проверяем первые 32.
// Если оно не разбивается, бросаем яйцо с 33 + (67 * 1/3) = 55 этажа. Если разбивается, проверяем этажи 34–55.
// В худшем случае для 1/3 (33, 24,…) — это 33. 


// У вас есть список из n элементов, которые представляют собой оценки студентов по математике. 
//Вам нужно отсортировать этот список в порядке убывания оценок с использованием алгоритма сортировки Merge sort.
// Для решения этой задачи напишите функцию, которая принимает на вход список оценок и возвращает новый список, отсортированный в порядке убывания.
// { 3, 8, 1, 9, 4, 2, 7, 6, 5 };

function marksSort(array) {
    if (array.length > 1) {
        const middle = Math.floor(array.length / 2);
        const leftPart = array.slice(0, middle);
        const rightPart = array.slice(middle);

        let leftIndex = 0; 
        let rightIndex = 0;
        let resIndex = 0;

        marksSort(leftPart);
        marksSort(rightPart);

        while (leftIndex < leftPart.length && rightIndex < rightPart.length) {
            if (leftPart[leftIndex] < rightPart[rightIndex]) {
                array[resIndex] = leftPart[leftIndex];
				leftIndex++ ;
            } else {
                array[resIndex] = rightPart[rightIndex];
                rightIndex++;
			}
			resIndex++; 
        }

        while (leftIndex < leftPart.length) {
            array[resIndex] = leftPart[leftIndex];
            leftIndex++;
            resIndex++;
		}
        
        while (rightIndex < rightPart.length) {
            array[resIndex] = rightPart[rightIndex];
            rightIndex++;
            resIndex++;
        }
        
    }
    return array;
}

console.log(marksSort([3, 8, 1, 9, 4, 2, 7, 6, 5]));
